// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: v1/alarm.proto

package alarm

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlarmService_SetAlarmState_FullMethodName = "/alarm.button.AlarmService/SetAlarmState"
	AlarmService_GetAlarmState_FullMethodName = "/alarm.button.AlarmService/GetAlarmState"
)

// AlarmServiceClient is the client API for AlarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AlarmService defines the core operations for the alarm button system.
// This service handles both alarm activation/deactivation and status checks.
type AlarmServiceClient interface {
	// SetAlarmState allows clients to activate or deactivate the alarm.
	SetAlarmState(ctx context.Context, in *SetAlarmStateRequest, opts ...grpc.CallOption) (*AlarmStateResponse, error)
	// GetAlarmState returns the current status of the alarm system.
	GetAlarmState(ctx context.Context, in *GetAlarmStateRequest, opts ...grpc.CallOption) (*AlarmStateResponse, error)
}

type alarmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlarmServiceClient(cc grpc.ClientConnInterface) AlarmServiceClient {
	return &alarmServiceClient{cc}
}

func (c *alarmServiceClient) SetAlarmState(ctx context.Context, in *SetAlarmStateRequest, opts ...grpc.CallOption) (*AlarmStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmStateResponse)
	err := c.cc.Invoke(ctx, AlarmService_SetAlarmState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmServiceClient) GetAlarmState(ctx context.Context, in *GetAlarmStateRequest, opts ...grpc.CallOption) (*AlarmStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmStateResponse)
	err := c.cc.Invoke(ctx, AlarmService_GetAlarmState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlarmServiceServer is the server API for AlarmService service.
// All implementations must embed UnimplementedAlarmServiceServer
// for forward compatibility.
//
// AlarmService defines the core operations for the alarm button system.
// This service handles both alarm activation/deactivation and status checks.
type AlarmServiceServer interface {
	// SetAlarmState allows clients to activate or deactivate the alarm.
	SetAlarmState(context.Context, *SetAlarmStateRequest) (*AlarmStateResponse, error)
	// GetAlarmState returns the current status of the alarm system.
	GetAlarmState(context.Context, *GetAlarmStateRequest) (*AlarmStateResponse, error)
	mustEmbedUnimplementedAlarmServiceServer()
}

// UnimplementedAlarmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlarmServiceServer struct{}

func (UnimplementedAlarmServiceServer) SetAlarmState(context.Context, *SetAlarmStateRequest) (*AlarmStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlarmState not implemented")
}
func (UnimplementedAlarmServiceServer) GetAlarmState(context.Context, *GetAlarmStateRequest) (*AlarmStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlarmState not implemented")
}
func (UnimplementedAlarmServiceServer) mustEmbedUnimplementedAlarmServiceServer() {}
func (UnimplementedAlarmServiceServer) testEmbeddedByValue()                      {}

// UnsafeAlarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlarmServiceServer will
// result in compilation errors.
type UnsafeAlarmServiceServer interface {
	mustEmbedUnimplementedAlarmServiceServer()
}

func RegisterAlarmServiceServer(s grpc.ServiceRegistrar, srv AlarmServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlarmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlarmService_ServiceDesc, srv)
}

func _AlarmService_SetAlarmState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAlarmStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).SetAlarmState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmService_SetAlarmState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).SetAlarmState(ctx, req.(*SetAlarmStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmService_GetAlarmState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServiceServer).GetAlarmState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmService_GetAlarmState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServiceServer).GetAlarmState(ctx, req.(*GetAlarmStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlarmService_ServiceDesc is the grpc.ServiceDesc for AlarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alarm.button.AlarmService",
	HandlerType: (*AlarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAlarmState",
			Handler:    _AlarmService_SetAlarmState_Handler,
		},
		{
			MethodName: "GetAlarmState",
			Handler:    _AlarmService_GetAlarmState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/alarm.proto",
}
