version: "3"

silent: true

vars:
  # -------------------------------
  # Platform Configuration
  # -------------------------------

  # Path separator per OS.
  PS: '{{fromSlash "/"}}'

  # Cross-platform mkdir/rm helpers.
  RMRF: '{{if eq OS "windows"}}powershell.exe -Command "Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Path{{else}}rm -rf{{end}}'
  RMRF_END: '{{if eq OS "windows"}}; exit 0"{{end}}'
  MKDIR: '{{if eq OS "windows"}}powershell.exe -Command "New-Item -ItemType Directory -Force -Path{{else}}mkdir -p{{end}}'
  MKDIR_END: '{{if eq OS "windows"}} | Out-Null"{{end}}'

  # -------------------------------
  # Project Directories
  # -------------------------------

  # Local bin & temp dirs (kept in repo root).
  LOCAL_BIN: "{{.TASKFILE_DIR}}{{.PS}}bin"
  CMD_DIR: "{{.TASKFILE_DIR}}{{.PS}}cmd"

  # -------------------------------
  # Protobuf Toolchain Configuration
  # -------------------------------

  # Protocol Buffers compiler version (must be explicit version - protoc doesn't support 'latest' tag).
  PROTOC_VERSION: "32.1"
  # Release tag for Protocol Buffers compiler downloads.
  PROTOC_DOWNLOAD_TAG: "v{{.PROTOC_VERSION}}"

  # These can use 'latest' since they're installed via go install.
  # Protobuf Go generator version.
  PROTOC_GEN_GO_TAG: "latest"
  # gRPC Go generator version.
  PROTOC_GEN_GO_GRPC_TAG: "latest"

  # Platform-specific protoc zip filename.
  PROTOC_ZIP: 'protoc-{{.PROTOC_VERSION}}-{{if eq OS "windows"}}win64{{else if eq OS "darwin"}}osx-x86_64{{else}}linux-x86_64{{end}}.zip'
  # Full path to download protoc zip (different locations for Windows vs Unix).
  PROTOC_ZIP_FULL_PATH: '{{if eq OS "windows"}}{{.LOCAL_BIN}}{{.PS}}{{.PROTOC_ZIP}}{{else}}{{.PS}}tmp{{.PS}}{{.PROTOC_ZIP}}{{end}}'
  # URL to download protoc from GitHub releases.
  PROTOC_URL: "https://github.com/protocolbuffers/protobuf/releases/download/{{.PROTOC_DOWNLOAD_TAG}}/{{.PROTOC_ZIP}}"

  # Binary names and paths.
  PROTOC_BIN_BASE: "protoc{{exeExt}}"
  PROTOC_BIN: "{{.LOCAL_BIN}}{{.PS}}{{.PROTOC_BIN_BASE}}"
  # Temporary path where protoc binary is initially extracted.
  PROTOC_BIN_IN_ZIP: "{{.LOCAL_BIN}}{{.PS}}bin{{.PS}}{{.PROTOC_BIN_BASE}}"
  PROTOC_GEN_GO_BIN: "{{.LOCAL_BIN}}{{.PS}}protoc-gen-go{{exeExt}}"
  PROTOC_GEN_GO_GRPC_BIN: "{{.LOCAL_BIN}}{{.PS}}protoc-gen-go-grpc{{exeExt}}"

  # -------------------------------
  # Tool Versions
  # -------------------------------

  # Go imports tool (version can be 'latest' since installed via go install).
  GOIMPORTS_TAG: "latest"
  # Linting tool version.
  GOLANGCI_TAG: "latest"

  # -------------------------------
  # Tool Binaries
  # -------------------------------

  GOIMPORTS_BIN: "{{.LOCAL_BIN}}{{.PS}}goimports{{exeExt}}"
  GOLANGCI_BIN: "{{.LOCAL_BIN}}{{.PS}}golangci-lint{{exeExt}}"

  # -------------------------------
  # Version Detection
  # -------------------------------

  # Commands to check current versions of installed tools.
  PROTOC_VERSION_OUTPUT:
    sh: '"{{.PROTOC_BIN}}" --version 2> /dev/null || true'
  PROTOC_GEN_GO_VERSION_OUTPUT:
    sh: '"{{.PROTOC_GEN_GO_BIN}}" --version 2> /dev/null || true'
  PROTOC_GEN_GO_GRPC_VERSION_OUTPUT:
    sh: '"{{.PROTOC_GEN_GO_GRPC_BIN}}" --version 2> /dev/null || true'
  GOIMPORTS_VERSION_OUTPUT:
    sh: 'go version -m "{{.GOIMPORTS_BIN}}" 2> /dev/null || true'
  GOLANGCI_VERSION_OUTPUT:
    sh: '{{if eq OS "windows"}}powershell -Command "try { if (Test-Path ''{{.GOLANGCI_BIN}}'') { & ''{{.GOLANGCI_BIN}}'' version } } catch { }; exit 0"{{else}}"{{.GOLANGCI_BIN}}" version 2> /dev/null || true{{end}}'

  # Regex patterns to extract version numbers from tool outputs.
  PROTOC_CURRENT_TAG: '{{regexFind "[0-9]+.[0-9]+" .PROTOC_VERSION_OUTPUT}}'
  PROTOC_GEN_GO_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" .PROTOC_GEN_GO_VERSION_OUTPUT}}'
  PROTOC_GEN_GO_GRPC_CURRENT_TAG: 'v{{regexFind "([0-9]+.){2}([0-9a-z])+" .PROTOC_GEN_GO_GRPC_VERSION_OUTPUT}}'
  GOIMPORTS_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" (regexFind "golang.org/x/tools\tv([0-9]+.){2}([0-9a-z])+\t" .GOIMPORTS_VERSION_OUTPUT)}}'
  GOLANGCI_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" (regexFind "version v([0-9]+.){2}([0-9a-z])+ " .GOLANGCI_VERSION_OUTPUT)}}'

  # -------------------------------
  # Configuration Files
  # -------------------------------

  GOLANGCI_CONFIG: ".golangci.yaml"

  # -------------------------------
  # Project Binaries
  # -------------------------------

  # List of binaries to build.
  BINARIES:
    - "alarm-button-off"
    - "alarm-button-on"
    - "alarm-checker"
    - "alarm-packager"
    - "alarm-server"
    - "alarm-updater"

  # -------------------------------
  # Version Detection and Injection
  # -------------------------------

  # Detect the latest semantic version tag (v1.2.3 format only).
  # Note: This variable is computed before deps run.
  # For fresh tags, use dynamic detection in build task.
  LATEST_SEMVER_TAG:
    sh: 'git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 2>/dev/null || echo ""'

  # Current Git commit hash for build metadata.
  GIT_COMMIT:
    sh: 'git rev-parse --short HEAD 2>/dev/null || echo "dev"'

  # Build timestamp in UTC ISO format.
  BUILD_TIME:
    sh: '{{if eq OS "windows"}}powershell -Command "Get-Date -UFormat \"%Y-%m-%dT%H:%M:%SZ\""{{else}}date -u +"%Y-%m-%dT%H:%M:%SZ"{{end}}'

tasks:
  # -------------------------------
  # Default & Help
  # -------------------------------

  default:
    cmds:
      - task -l

  # -------------------------------
  # Tool Installation
  # -------------------------------

  _ensure-bin:
    internal: true
    cmds:
      - '{{.MKDIR}} ''{{.LOCAL_BIN}}''{{.MKDIR_END}}'

  install-protoc:
    desc: "Install protoc compiler into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        # Only install if current version doesn't match desired version.
        {{if (not (eq .PROTOC_CURRENT_TAG .PROTOC_VERSION))}}
          echo "Installing protoc, version: {{.PROTOC_VERSION}}..."
          {{if eq OS "windows"}}
            # Windows-specific download and extraction.
            curl -fSL -o "{{.PROTOC_ZIP_FULL_PATH}}" "{{.PROTOC_URL}}"
            powershell Expand-Archive -Path "{{.PROTOC_ZIP_FULL_PATH}}" -DestinationPath "{{.LOCAL_BIN}}" -Force
          {{else}}
            # Unix/Mac download and extraction.
            curl -fSL -o {{.PROTOC_ZIP_FULL_PATH}} "{{.PROTOC_URL}}"
            unzip -o {{.PROTOC_ZIP_FULL_PATH}} -d "{{.LOCAL_BIN}}"
            chmod +x "{{.PROTOC_BIN_IN_ZIP}}"
          {{end}}
          # Cleanup temporary files.
          {{.RMRF}} "{{.PROTOC_ZIP_FULL_PATH}}"{{.RMRF_END}}
          # Move binary to final location.
          {{if eq OS "windows"}}
            powershell Move-Item -Force "{{.PROTOC_BIN_IN_ZIP}}" "{{.PROTOC_BIN}}"
          {{else}}
            mv "{{.PROTOC_BIN_IN_ZIP}}" "{{.PROTOC_BIN}}"
          {{end}}
          # Remove unnecessary extracted files.
          {{.RMRF}} "{{.LOCAL_BIN}}{{.PS}}bin"{{.RMRF_END}}
          {{.RMRF}} "{{.LOCAL_BIN}}{{.PS}}readme.txt"{{.RMRF_END}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-protoc-gen-go:
    desc: "Install protoc-gen-go plugin into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        {{if (not (eq .PROTOC_GEN_GO_CURRENT_TAG .PROTOC_GEN_GO_TAG))}}
          echo "Installing protoc-gen-go, version: {{.PROTOC_GEN_GO_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install google.golang.org/protobuf/cmd/protoc-gen-go@{{.PROTOC_GEN_GO_TAG}}"
          {{else}}
            go install google.golang.org/protobuf/cmd/protoc-gen-go@{{.PROTOC_GEN_GO_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-protoc-gen-go-grpc:
    desc: "Install protoc-gen-go-grpc plugin into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        {{if (not (eq .PROTOC_GEN_GO_GRPC_CURRENT_TAG .PROTOC_GEN_GO_GRPC_TAG))}}
          echo "Installing protoc-gen-go-grpc, version: {{.PROTOC_GEN_GO_GRPC_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{.PROTOC_GEN_GO_GRPC_TAG}}"
          {{else}}
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{.PROTOC_GEN_GO_GRPC_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  _install-goimports:
    internal: true
    deps: [_ensure-bin]
    cmds:
      - |
        {{if (not (eq .GOIMPORTS_CURRENT_TAG .GOIMPORTS_TAG))}}
          echo "Installing goimports, version: {{.GOIMPORTS_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install golang.org/x/tools/cmd/goimports@{{.GOIMPORTS_TAG}}"
          {{else}}
            go install golang.org/x/tools/cmd/goimports@{{.GOIMPORTS_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-lint:
    desc: "Install golangci-lint into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        # Only install if current version doesn't match desired version.
        {{if (not (eq .GOLANGCI_CURRENT_TAG .GOLANGCI_TAG))}}
          echo "Installing golangci-lint, version: {{.GOLANGCI_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_TAG}}"
          {{else}}
            go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-tools:
    desc: "Install all development tools (golangci-lint, protoc, protoc-gen-go, protoc-gen-go-grpc, goimports)"
    deps: 
      - install-lint
      - install-protoc
      - install-protoc-gen-go
      - install-protoc-gen-go-grpc
      - _install-goimports

  # -------------------------------
  # Git Hooks
  # -------------------------------

  install-githooks:
    desc: "Configure Git hooks for this repository"
    cmds:
      - |
        echo "Setting up Git hooks..."
        git config --local core.hooksPath .githooks
        {{if ne OS "windows"}}
          chmod +x .githooks/commit-msg
        {{end}}
        echo "Git hooks configured successfully!"
        echo "Commit messages must now start with: fix:, feat:, or major:"

  remove-githooks:
    desc: "Disable Git hooks for this repository"
    cmds:
      - |
        echo "Disabling Git hooks..."
        git config --local --unset core.hooksPath || echo "Hooks path was not set"
        echo "Git hooks disabled. You can now use any commit message format."

  # -------------------------------
  # Code Generation
  # -------------------------------

  generate-protobuf:
    desc: "Generate protobuf code and format"
    deps:
      - install-protoc
      - install-protoc-gen-go
      - install-protoc-gen-go-grpc
      - _install-goimports
    cmds:
      - echo "Generating protobuf code..."
      - '{{.MKDIR}} internal/pb{{.MKDIR_END}}'
      - |
        {{if eq OS "windows"}}
          powershell.exe -Command "\$env:PATH = '{{.LOCAL_BIN}};' + \$env:PATH; & '{{.PROTOC_BIN}}' --go_out=internal/pb --go_opt=paths=source_relative --go-grpc_out=internal/pb --go-grpc_opt=paths=source_relative --proto_path={{.LOCAL_BIN}}{{.PS}}include --proto_path=api api/v1/*.proto"
        {{else}}
          PATH="{{.LOCAL_BIN}}:$PATH" "{{.PROTOC_BIN}}" --go_out=internal/pb --go_opt=paths=source_relative --go-grpc_out=internal/pb --go-grpc_opt=paths=source_relative --proto_path={{.LOCAL_BIN}}{{.PS}}include --proto_path=api api/v1/*.proto
        {{end}}
      - go mod tidy
      - echo "Formatting generated code..."
      - '"{{.GOIMPORTS_BIN}}" -w ./'
      - echo "Protobuf generation completed successfully!"

  # -------------------------------
  # Code Quality
  # -------------------------------

  lint-fix:
    desc: "Run golangci-lint with --fix"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify'
      - '"{{.GOLANGCI_BIN}}" run --fix'

  lint:
    desc: "Run golangci-lint"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify'
      - '"{{.GOLANGCI_BIN}}" run'

  # -------------------------------
  # Testing
  # -------------------------------

  test:
    desc: "Run unit tests"
    cmds:
      - go test -v ./...

  test-race:
    desc: "Run unit tests with race detector"
    cmds:
      - |
        {{if eq OS "windows"}}
          echo "Note: Race detector requires CGO. If this fails, install gcc (MinGW-w64) or use WSL."
          powershell.exe -Command "\$env:CGO_ENABLED = '1'; go test -race -v ./..."
        {{else}}
          go test -race -v ./...
        {{end}}
    env:
      CGO_ENABLED: "1"

  # -------------------------------
  # Build & Release
  # -------------------------------

  build:
    desc: "Build all project binaries with version injection"
    deps: [fetch-tags]
    cmds:
      - '{{.MKDIR}} ''{{.LOCAL_BIN}}''{{.MKDIR_END}}'
      - |
        {{if eq OS "windows"}}
          powershell.exe -ExecutionPolicy Bypass -File scripts/build.ps1 -LocalBin "{{.LOCAL_BIN}}" -CmdDir "{{.CMD_DIR}}" -TaskfileDir "{{.TASKFILE_DIR}}" -Binaries {{range $i, $binary := .BINARIES}}{{if $i}},{{end}}"{{$binary}}"{{end}}
        {{else}}
          bash scripts/build.sh "{{.LOCAL_BIN}}" "{{.CMD_DIR}}" "{{.TASKFILE_DIR}}" {{range .BINARIES}}"{{.}}" {{end}}
        {{end}}

  # -------------------------------
  # Cleanup
  # -------------------------------

  clean:
    desc: "Remove binaries and temporary files"
    cmds:
      - '{{.RMRF}} ''{{.LOCAL_BIN}}''{{.RMRF_END}}'

  # -------------------------------
  # Version Management
  # -------------------------------

  fetch-tags:
    desc: "Fetch tags from origin"
    cmds:
      - |
        echo "Fetching tags from origin..."
        git fetch --tags

  version-check:
    desc: "Check what the next version would be based on commits"
    deps: [fetch-tags]
    cmds:
      - |
        echo "Analyzing commits for version bump..."
        {{if eq OS "windows"}}
          powershell -ExecutionPolicy Bypass -File scripts/semver_next.ps1
        {{else}}
          bash scripts/semver_next.sh
        {{end}}
